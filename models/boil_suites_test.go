// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Addresses", testAddresses)
	t.Run("CartItems", testCartItems)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistories)
	t.Run("Ingredients", testIngredients)
	t.Run("Orders", testOrders)
	t.Run("RecipeIngredients", testRecipeIngredients)
	t.Run("Recipes", testRecipes)
	t.Run("UserAddresses", testUserAddresses)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Addresses", testAddressesDelete)
	t.Run("CartItems", testCartItemsDelete)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesDelete)
	t.Run("Ingredients", testIngredientsDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("RecipeIngredients", testRecipeIngredientsDelete)
	t.Run("Recipes", testRecipesDelete)
	t.Run("UserAddresses", testUserAddressesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesQueryDeleteAll)
	t.Run("CartItems", testCartItemsQueryDeleteAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesQueryDeleteAll)
	t.Run("Ingredients", testIngredientsQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("RecipeIngredients", testRecipeIngredientsQueryDeleteAll)
	t.Run("Recipes", testRecipesQueryDeleteAll)
	t.Run("UserAddresses", testUserAddressesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceDeleteAll)
	t.Run("CartItems", testCartItemsSliceDeleteAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSliceDeleteAll)
	t.Run("Ingredients", testIngredientsSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("RecipeIngredients", testRecipeIngredientsSliceDeleteAll)
	t.Run("Recipes", testRecipesSliceDeleteAll)
	t.Run("UserAddresses", testUserAddressesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Addresses", testAddressesExists)
	t.Run("CartItems", testCartItemsExists)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesExists)
	t.Run("Ingredients", testIngredientsExists)
	t.Run("Orders", testOrdersExists)
	t.Run("RecipeIngredients", testRecipeIngredientsExists)
	t.Run("Recipes", testRecipesExists)
	t.Run("UserAddresses", testUserAddressesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Addresses", testAddressesFind)
	t.Run("CartItems", testCartItemsFind)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesFind)
	t.Run("Ingredients", testIngredientsFind)
	t.Run("Orders", testOrdersFind)
	t.Run("RecipeIngredients", testRecipeIngredientsFind)
	t.Run("Recipes", testRecipesFind)
	t.Run("UserAddresses", testUserAddressesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Addresses", testAddressesBind)
	t.Run("CartItems", testCartItemsBind)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesBind)
	t.Run("Ingredients", testIngredientsBind)
	t.Run("Orders", testOrdersBind)
	t.Run("RecipeIngredients", testRecipeIngredientsBind)
	t.Run("Recipes", testRecipesBind)
	t.Run("UserAddresses", testUserAddressesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Addresses", testAddressesOne)
	t.Run("CartItems", testCartItemsOne)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesOne)
	t.Run("Ingredients", testIngredientsOne)
	t.Run("Orders", testOrdersOne)
	t.Run("RecipeIngredients", testRecipeIngredientsOne)
	t.Run("Recipes", testRecipesOne)
	t.Run("UserAddresses", testUserAddressesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Addresses", testAddressesAll)
	t.Run("CartItems", testCartItemsAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesAll)
	t.Run("Ingredients", testIngredientsAll)
	t.Run("Orders", testOrdersAll)
	t.Run("RecipeIngredients", testRecipeIngredientsAll)
	t.Run("Recipes", testRecipesAll)
	t.Run("UserAddresses", testUserAddressesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Addresses", testAddressesCount)
	t.Run("CartItems", testCartItemsCount)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesCount)
	t.Run("Ingredients", testIngredientsCount)
	t.Run("Orders", testOrdersCount)
	t.Run("RecipeIngredients", testRecipeIngredientsCount)
	t.Run("Recipes", testRecipesCount)
	t.Run("UserAddresses", testUserAddressesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Addresses", testAddressesHooks)
	t.Run("CartItems", testCartItemsHooks)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesHooks)
	t.Run("Ingredients", testIngredientsHooks)
	t.Run("Orders", testOrdersHooks)
	t.Run("RecipeIngredients", testRecipeIngredientsHooks)
	t.Run("Recipes", testRecipesHooks)
	t.Run("UserAddresses", testUserAddressesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Addresses", testAddressesInsert)
	t.Run("Addresses", testAddressesInsertWhitelist)
	t.Run("CartItems", testCartItemsInsert)
	t.Run("CartItems", testCartItemsInsertWhitelist)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesInsert)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesInsertWhitelist)
	t.Run("Ingredients", testIngredientsInsert)
	t.Run("Ingredients", testIngredientsInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("RecipeIngredients", testRecipeIngredientsInsert)
	t.Run("RecipeIngredients", testRecipeIngredientsInsertWhitelist)
	t.Run("Recipes", testRecipesInsert)
	t.Run("Recipes", testRecipesInsertWhitelist)
	t.Run("UserAddresses", testUserAddressesInsert)
	t.Run("UserAddresses", testUserAddressesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Addresses", testAddressesReload)
	t.Run("CartItems", testCartItemsReload)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesReload)
	t.Run("Ingredients", testIngredientsReload)
	t.Run("Orders", testOrdersReload)
	t.Run("RecipeIngredients", testRecipeIngredientsReload)
	t.Run("Recipes", testRecipesReload)
	t.Run("UserAddresses", testUserAddressesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Addresses", testAddressesReloadAll)
	t.Run("CartItems", testCartItemsReloadAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesReloadAll)
	t.Run("Ingredients", testIngredientsReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("RecipeIngredients", testRecipeIngredientsReloadAll)
	t.Run("Recipes", testRecipesReloadAll)
	t.Run("UserAddresses", testUserAddressesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Addresses", testAddressesSelect)
	t.Run("CartItems", testCartItemsSelect)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSelect)
	t.Run("Ingredients", testIngredientsSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("RecipeIngredients", testRecipeIngredientsSelect)
	t.Run("Recipes", testRecipesSelect)
	t.Run("UserAddresses", testUserAddressesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Addresses", testAddressesUpdate)
	t.Run("CartItems", testCartItemsUpdate)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesUpdate)
	t.Run("Ingredients", testIngredientsUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("RecipeIngredients", testRecipeIngredientsUpdate)
	t.Run("Recipes", testRecipesUpdate)
	t.Run("UserAddresses", testUserAddressesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceUpdateAll)
	t.Run("CartItems", testCartItemsSliceUpdateAll)
	t.Run("FlywaySchemaHistories", testFlywaySchemaHistoriesSliceUpdateAll)
	t.Run("Ingredients", testIngredientsSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("RecipeIngredients", testRecipeIngredientsSliceUpdateAll)
	t.Run("Recipes", testRecipesSliceUpdateAll)
	t.Run("UserAddresses", testUserAddressesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
