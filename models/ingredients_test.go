// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testIngredients(t *testing.T) {
	t.Parallel()

	query := Ingredients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testIngredientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Ingredients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testIngredientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := IngredientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ingredient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected IngredientExists to return true, but got false.")
	}
}

func testIngredientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ingredientFound, err := FindIngredient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ingredientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testIngredientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ingredients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testIngredientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ingredients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testIngredientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ingredientOne := &Ingredient{}
	ingredientTwo := &Ingredient{}
	if err = randomize.Struct(seed, ingredientOne, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientTwo, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ingredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testIngredientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ingredientOne := &Ingredient{}
	ingredientTwo := &Ingredient{}
	if err = randomize.Struct(seed, ingredientOne, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}
	if err = randomize.Struct(seed, ingredientTwo, ingredientDBTypes, false, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ingredientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ingredientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ingredientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func ingredientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ingredient) error {
	*o = Ingredient{}
	return nil
}

func testIngredientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ingredient{}
	o := &Ingredient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ingredientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ingredient object: %s", err)
	}

	AddIngredientHook(boil.BeforeInsertHook, ingredientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeInsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterInsertHook, ingredientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ingredientAfterInsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterSelectHook, ingredientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ingredientAfterSelectHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeUpdateHook, ingredientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeUpdateHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterUpdateHook, ingredientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ingredientAfterUpdateHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeDeleteHook, ingredientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeDeleteHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterDeleteHook, ingredientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ingredientAfterDeleteHooks = []IngredientHook{}

	AddIngredientHook(boil.BeforeUpsertHook, ingredientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientBeforeUpsertHooks = []IngredientHook{}

	AddIngredientHook(boil.AfterUpsertHook, ingredientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ingredientAfterUpsertHooks = []IngredientHook{}
}

func testIngredientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ingredientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testIngredientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := IngredientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testIngredientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ingredients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ingredientDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Description`: `varchar`, `Thumbnail`: `varchar`, `CreatedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testIngredientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testIngredientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ingredient{}
	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ingredientDBTypes, true, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ingredientAllColumns, ingredientPrimaryKeyColumns) {
		fields = ingredientAllColumns
	} else {
		fields = strmangle.SetComplement(
			ingredientAllColumns,
			ingredientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := IngredientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testIngredientsUpsert(t *testing.T) {
	t.Parallel()

	if len(ingredientAllColumns) == len(ingredientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLIngredientUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ingredient{}
	if err = randomize.Struct(seed, &o, ingredientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ingredient: %s", err)
	}

	count, err := Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ingredientDBTypes, false, ingredientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ingredient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ingredient: %s", err)
	}

	count, err = Ingredients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
