// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CartItem is an object representing the database table.
type CartItem struct {
	ID       int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID   null.Int `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	RecipeID null.Int `boil:"recipe_id" json:"recipe_id,omitempty" toml:"recipe_id" yaml:"recipe_id,omitempty"`

	R *cartItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cartItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CartItemColumns = struct {
	ID       string
	UserID   string
	RecipeID string
}{
	ID:       "id",
	UserID:   "user_id",
	RecipeID: "recipe_id",
}

var CartItemTableColumns = struct {
	ID       string
	UserID   string
	RecipeID string
}{
	ID:       "cart_items.id",
	UserID:   "cart_items.user_id",
	RecipeID: "cart_items.recipe_id",
}

// Generated where

var CartItemWhere = struct {
	ID       whereHelperint
	UserID   whereHelpernull_Int
	RecipeID whereHelpernull_Int
}{
	ID:       whereHelperint{field: "`cart_items`.`id`"},
	UserID:   whereHelpernull_Int{field: "`cart_items`.`user_id`"},
	RecipeID: whereHelpernull_Int{field: "`cart_items`.`recipe_id`"},
}

// CartItemRels is where relationship names are stored.
var CartItemRels = struct {
}{}

// cartItemR is where relationships are stored.
type cartItemR struct {
}

// NewStruct creates a new relationship struct
func (*cartItemR) NewStruct() *cartItemR {
	return &cartItemR{}
}

// cartItemL is where Load methods for each relationship are stored.
type cartItemL struct{}

var (
	cartItemAllColumns            = []string{"id", "user_id", "recipe_id"}
	cartItemColumnsWithoutDefault = []string{"user_id", "recipe_id"}
	cartItemColumnsWithDefault    = []string{"id"}
	cartItemPrimaryKeyColumns     = []string{"id"}
	cartItemGeneratedColumns      = []string{}
)

type (
	// CartItemSlice is an alias for a slice of pointers to CartItem.
	// This should almost always be used instead of []CartItem.
	CartItemSlice []*CartItem
	// CartItemHook is the signature for custom CartItem hook methods
	CartItemHook func(context.Context, boil.ContextExecutor, *CartItem) error

	cartItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cartItemType                 = reflect.TypeOf(&CartItem{})
	cartItemMapping              = queries.MakeStructMapping(cartItemType)
	cartItemPrimaryKeyMapping, _ = queries.BindMapping(cartItemType, cartItemMapping, cartItemPrimaryKeyColumns)
	cartItemInsertCacheMut       sync.RWMutex
	cartItemInsertCache          = make(map[string]insertCache)
	cartItemUpdateCacheMut       sync.RWMutex
	cartItemUpdateCache          = make(map[string]updateCache)
	cartItemUpsertCacheMut       sync.RWMutex
	cartItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cartItemAfterSelectMu sync.Mutex
var cartItemAfterSelectHooks []CartItemHook

var cartItemBeforeInsertMu sync.Mutex
var cartItemBeforeInsertHooks []CartItemHook
var cartItemAfterInsertMu sync.Mutex
var cartItemAfterInsertHooks []CartItemHook

var cartItemBeforeUpdateMu sync.Mutex
var cartItemBeforeUpdateHooks []CartItemHook
var cartItemAfterUpdateMu sync.Mutex
var cartItemAfterUpdateHooks []CartItemHook

var cartItemBeforeDeleteMu sync.Mutex
var cartItemBeforeDeleteHooks []CartItemHook
var cartItemAfterDeleteMu sync.Mutex
var cartItemAfterDeleteHooks []CartItemHook

var cartItemBeforeUpsertMu sync.Mutex
var cartItemBeforeUpsertHooks []CartItemHook
var cartItemAfterUpsertMu sync.Mutex
var cartItemAfterUpsertHooks []CartItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CartItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CartItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CartItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CartItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CartItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CartItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CartItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CartItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CartItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCartItemHook registers your hook function for all future operations.
func AddCartItemHook(hookPoint boil.HookPoint, cartItemHook CartItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cartItemAfterSelectMu.Lock()
		cartItemAfterSelectHooks = append(cartItemAfterSelectHooks, cartItemHook)
		cartItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cartItemBeforeInsertMu.Lock()
		cartItemBeforeInsertHooks = append(cartItemBeforeInsertHooks, cartItemHook)
		cartItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cartItemAfterInsertMu.Lock()
		cartItemAfterInsertHooks = append(cartItemAfterInsertHooks, cartItemHook)
		cartItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cartItemBeforeUpdateMu.Lock()
		cartItemBeforeUpdateHooks = append(cartItemBeforeUpdateHooks, cartItemHook)
		cartItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cartItemAfterUpdateMu.Lock()
		cartItemAfterUpdateHooks = append(cartItemAfterUpdateHooks, cartItemHook)
		cartItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cartItemBeforeDeleteMu.Lock()
		cartItemBeforeDeleteHooks = append(cartItemBeforeDeleteHooks, cartItemHook)
		cartItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cartItemAfterDeleteMu.Lock()
		cartItemAfterDeleteHooks = append(cartItemAfterDeleteHooks, cartItemHook)
		cartItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cartItemBeforeUpsertMu.Lock()
		cartItemBeforeUpsertHooks = append(cartItemBeforeUpsertHooks, cartItemHook)
		cartItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cartItemAfterUpsertMu.Lock()
		cartItemAfterUpsertHooks = append(cartItemAfterUpsertHooks, cartItemHook)
		cartItemAfterUpsertMu.Unlock()
	}
}

// One returns a single cartItem record from the query.
func (q cartItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CartItem, error) {
	o := &CartItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cart_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CartItem records from the query.
func (q cartItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (CartItemSlice, error) {
	var o []*CartItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CartItem slice")
	}

	if len(cartItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CartItem records in the query.
func (q cartItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cart_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cartItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cart_items exists")
	}

	return count > 0, nil
}

// CartItems retrieves all the records using an executor.
func CartItems(mods ...qm.QueryMod) cartItemQuery {
	mods = append(mods, qm.From("`cart_items`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`cart_items`.*"})
	}

	return cartItemQuery{q}
}

// FindCartItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCartItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CartItem, error) {
	cartItemObj := &CartItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `cart_items` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cartItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cart_items")
	}

	if err = cartItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cartItemObj, err
	}

	return cartItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CartItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cart_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cartItemInsertCacheMut.RLock()
	cache, cached := cartItemInsertCache[key]
	cartItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cartItemAllColumns,
			cartItemColumnsWithDefault,
			cartItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cartItemType, cartItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cartItemType, cartItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `cart_items` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `cart_items` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `cart_items` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, cartItemPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cart_items")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cartItemMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cart_items")
	}

CacheNoHooks:
	if !cached {
		cartItemInsertCacheMut.Lock()
		cartItemInsertCache[key] = cache
		cartItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CartItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CartItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cartItemUpdateCacheMut.RLock()
	cache, cached := cartItemUpdateCache[key]
	cartItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cartItemAllColumns,
			cartItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cart_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `cart_items` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, cartItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cartItemType, cartItemMapping, append(wl, cartItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cart_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cart_items")
	}

	if !cached {
		cartItemUpdateCacheMut.Lock()
		cartItemUpdateCache[key] = cache
		cartItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cartItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cart_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CartItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `cart_items` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cartItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cartItem")
	}
	return rowsAff, nil
}

var mySQLCartItemUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CartItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cart_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartItemColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCartItemUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cartItemUpsertCacheMut.RLock()
	cache, cached := cartItemUpsertCache[key]
	cartItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cartItemAllColumns,
			cartItemColumnsWithDefault,
			cartItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cartItemAllColumns,
			cartItemPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert cart_items, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`cart_items`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `cart_items` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(cartItemType, cartItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cartItemType, cartItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for cart_items")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == cartItemMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(cartItemType, cartItemMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for cart_items")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for cart_items")
	}

CacheNoHooks:
	if !cached {
		cartItemUpsertCacheMut.Lock()
		cartItemUpsertCache[key] = cache
		cartItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CartItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CartItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CartItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cartItemPrimaryKeyMapping)
	sql := "DELETE FROM `cart_items` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cart_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cartItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cartItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cart_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CartItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cartItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `cart_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cartItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cartItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_items")
	}

	if len(cartItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CartItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCartItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CartItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CartItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `cart_items`.* FROM `cart_items` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, cartItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CartItemSlice")
	}

	*o = slice

	return nil
}

// CartItemExists checks if the CartItem row exists.
func CartItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `cart_items` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cart_items exists")
	}

	return exists, nil
}

// Exists checks if the CartItem row exists.
func (o *CartItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CartItemExists(ctx, exec, o.ID)
}
